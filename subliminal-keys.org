#+TITLE: Subliminal Keys
#+AUTHOR: mattmc3
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

Keybindings for the Mac that make Emacs feel more familiar to users of other editors like VSCode, Sublime Text, or Atom.

* Modifiers

** Mac configuration
On a Mac, we want to use ⌘-Cmd as Super, and ⌥-Opt as Meta.

#+begin_src emacs-lisp
  (setq mac-option-key-is-meta t
        mac-command-key-is-meta nil
        mac-command-modifier 'super
        mac-option-modifier 'meta)
#+end_src

* Key bindings

** Resources

 - [[https://osdn.net/projects/macwiki/svn/view/zenitani/CarbonEmacs/src/lisp/mac-key-mode.el?root=macwiki&view=markup][Mac Key Mode]] from CarbonEmacs

** Sublime Text

Sublime has some keybindings for its own unique features like ⌘-shift-p

#+begin_src emacs-lisp
  (global-set-key (kbd "s-S-p") 'execute-extended-command)
#+end_src

** Edit

*** Line

#+begin_src emacs-lisp
  (global-set-key (kbd "<s-S-return>") 'subl/insert-line-above)
  (global-set-key (kbd "<s-return>") 'subl/insert-line-below)
  (global-set-key (kbd "s-j") 'subl/join-line)
#+end_src

** Escape
C-g is the Emacs standard, but using the Esc key is common coming from other editors

[[https://www.reddit.com/r/emacs/comments/67rlfr/esc_vs_cg/][See this thread]]

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

** Sorting

Sublime uses F5 and C-F5 for sorting. That can be somewhat controversial, so this code is here, but
we're not going to tangle it at this time.

See discussion [[https://github.com/microsoft/vscode-sublime-keybindings/issues/50][here]]

#+begin_src emacs-lisp :tangle no
  ;; (global-set-key (kbd "<f5>") 'subl/sort-lines-nocase)
  ;; (global-set-key (kbd "C-<f5>") 'sort-lines)
#+end_src

** Code folding

Sublime allows code folding with simple keyboard shortcuts.

#+begin_src emacs-lisp
  ;; https://emacs.wordpress.com/2007/01/16/quick-and-dirty-code-folding/
  (defun subliminal/toggle-selective-display (column)
    (interactive "P")
    (set-selective-display 
      (if selective-display nil (or column 1))))

  ;; C-0 unfold all
  (global-set-key (kbd "C-0") 'set-selective-display)
  ;; C-1 thru C-9, fold levels
  (global-set-key (kbd "C-1") 'subliminal/toggle-selective-display)
#+end_src

** Text zoom

Zoom in and out of text with plus/minus (⌘-= is + without the need for shift)

#+begin_src emacs-lisp
  (global-set-key (kbd "s-=") 'text-scale-increase)
  (global-set-key (kbd "s--") 'text-scale-decrease)
#+end_src

** Cut/Copy/Paste

#+begin_src emacs-lisp
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank)
#+end_src

** Undo/redo

- [[https://gitlab.com/ideasman42/emacs-undo-fu][Undo-fu]] package
- [[http://ergoemacs.org/emacs/emacs_best_redo_mode.html][Undo/redo saga]]
- [[https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs][Stackoverflow]]

#+begin_src emacs-lisp
  (global-set-key (kbd "s-z") 'undo-fu-only-undo)
  (global-set-key (kbd "s-Z") 'undo-fu-only-redo)
#+end_src

** Multi-cursor

#+begin_src emacs-lisp
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "s-D") 'mc/mark-next-like-this-word)
  (global-set-key (kbd "s-L") 'mc/edit-ends-of-lines)
#+end_src

** Movement

*** Home/End

#+begin_src emacs-lisp
  (global-set-key [(super left)] 'beginning-of-line)
  (global-set-key [(super right)] 'end-of-line)
#+end_src

*** Top/Bottom

#+begin_src emacs-lisp
  (global-set-key [(super up)] 'beginning-of-buffer)
  (global-set-key [(super down)] 'end-of-buffer)
#+end_src

** Coding
*** Commenting
To handle code commenting properly, let's punt and use a plugin

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :config
  (global-set-key (kbd "s-/") 'evilnc-comment-or-uncomment-lines))
#+end_src
** File management

#+begin_src emacs-lisp
  (global-set-key (kbd "s-n") 'kill-ring-save)
  (global-set-key (kbd "s-s") 'save-buffer)
#+end_src

** Window management

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "s-w") 'mac-key-close-window)
#+end_src

** Text selection
#+begin_src emacs-lisp
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
#+end_src

** Shell

#+begin_src emacs-lisp
  (global-set-key (kbd "C-`") 'subl/open-eshell)
#+end_src

* Org mode
#+begin_src emacs-lisp
  ;; https://emacs.stackexchange.com/questions/43656/make-c-s-up-handle-shift-selection-under-org-mode
  ;; https://orgmode.org/manual/Conflicts.html
  (setq org-support-shift-select t
	org-replace-disputed-keys t)
  (eval-after-load "org"
    '(progn
       (define-key org-mode-map (kbd "<S-up>") nil)
       (define-key org-mode-map (kbd "<S-down>") nil)
       (define-key org-mode-map (kbd "<S-left>") nil)
       (define-key org-mode-map (kbd "<S-right>") nil)
       (define-key org-mode-map (kbd "<M-S-left>") nil)
       (define-key org-mode-map (kbd "<M-S-right>") nil)
       (define-key org-mode-map (kbd "<M-left>") nil)
       (define-key org-mode-map (kbd "<M-right>") nil)
       (define-key org-mode-map [C-S-up] 'org-shiftup)
       (define-key org-mode-map [C-S-down] 'org-shiftdown)
       (define-key org-mode-map [C-S-left] 'org-shiftleft)
       (define-key org-mode-map [C-S-right] 'org-shiftright)
       (define-key org-mode-map [C-S-right] 'org-shiftmetaright)
       (define-key org-mode-map [C-S-left] 'org-shiftmetaleft)
       (define-key org-mode-map [C-right] 'org-metaright)
       (define-key org-mode-map [C-left] 'org-metaleft)
       (define-key org-mode-map [C-S-return] 'org-insert-todo-heading)
       ))
#+end_src
