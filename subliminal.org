#+TITLE: Subliminal Emacs Config
#+AUTHOR: mattmc3
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Subliminal

There are some awesome things editors like Sublime Text has built in.
Let's add those behaviors to Emacs, either through plugins or through other means.


* Notes

This is an org mode literate config. Use <TAB> to expand sections, and put Emacs lisp in source blocks.

** References

- [[https://github.com/hrs/sensible-defaults.el/blob/main/sensible-defaults.el][Sensible defaults]]

** TODOs

*** General TODOs
- [ ] Add mini-map
- [ ] Find/Replace shortcuts
- [ ] Configure multi-cursor
- [ ] File tree sidebar
- [ ] modeline (diminish)
- [ ] recent files (recentf)
- [ ] move between windows (groups in sublime)
- [ ] terminal (vterm/eshell)
- [ ] code folding
- [ ] indenting
- [ ] scratch buffer (sublima)
- [ ] show whitespace on highlight
- [x] highlight line
- [x] âŒ˜-P for M-x
- [x] Add multiple cursor plugin
- [x] Save sessions

*** Keybinding TODOs
- [ ] indent/dedent
- [ ] block comment

*** Developer tool TODOs
- [ ] Magit
- [ ] LSP
- [ ] Treesitter


* Config

** Behaviors

*** Shell

#+begin_src emacs-lisp
  (defun subl/open-eshell ()
    "Open an eshell split"
    (interactive)
    (let ((w (split-window-below)))
      (select-window w)
      (eshell))
    (switch-to-buffer "*eshell*"))
#+end_src

*** Sorting

#+begin_src emacs-lisp :tangle no
  ;; https://stackoverflow.com/questions/20967818/emacs-function-to-case-insensitive-sort-lines/20967895
  (defun subl/sort-lines-nocase ()
    (interactive)
    (let ((sort-fold-case t))
      (call-interactively 'sort-lines)))
#+end_src

*** Insert line above/below

#+begin_src emacs-lisp
  (defun subl/insert-line-above ()
    "Insert a new line above the current one and go there"
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (defun subl/insert-line-below ()
    "Insert a new line below the current one and go there"
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent)
    (indent-according-to-mode))
#+end_src

*** Join lines

#+begin_src emacs-lisp
  (defun subl/join-line ()
    "Join the line below with the current line"
    (interactive)
    (join-line -1))
#+end_src

*** Save all

#+begin_src emacs-lisp
  ; http://ergoemacs.org/emacs/emacs_auto_save.html
(defun subl/save-all-unsaved ()
  "Save all unsaved files without prompting"
  (interactive)
  (save-some-buffers t))
#+end_src


** Feature initialization

*** Package management

We want to use external packages, so let's get that configured with [[https://github.com/jwiegley/use-package][use-package]]

#+begin_src emacs-lisp
  (defun subl/init-use-package ()
    (require 'package)

    (setq package-enable-at-startup nil)

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/") t)

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (setq use-package-always-ensure t))
#+end_src

*** Miscellaneous Settings

#+begin_src emacs-lisp
  (defun subl/init-miscellaneous-settings ()
    ;; write over selected text on input... like modern editors should
    (delete-selection-mode t)

    ;; Don't persist a custom file
    (setq custom-file null-device)         ; use a temp file as a placeholder
    (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
    (setq enable-local-variables :all)     ; fix =defvar= warnings

    ;; revert buffers automatically when underlying files are changed externally
    (global-auto-revert-mode t)

    ;; stop emacs from littering the file system with backup files
    (setq make-backup-files nil
          auto-save-default nil
          create-lockfiles nil)

    ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html
    (setq lexical-binding t)

    ;; The default is 600
    (setq max-lisp-eval-depth 2000)

    ;; Always load newest byte code
    (setq load-prefer-newer t)

    ;; reduce the frequency of garbage collection by making it happen on
    ;; each 50MB of allocated data (the default is on every 0.76MB)
    (setq gc-cons-threshold 50000000)

    ;; warn when opening files bigger than 100MB
    (setq large-file-warning-threshold 100000000)

    ;; always allow 'y' instead of 'yes'
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; smart tab behavior - indent or complete
    (setq tab-always-indent 'complete)

    ;; disable blink-matching-paren in favor of using colors
    (setq blink-matching-paren nil))
#+end_src

*** Miscellaneous packages

- [[https://github.com/domtronn/all-the-icons.el][All the icons]]

#+begin_src emacs-lisp
  (defun subl/init-miscellaneous-packages ()
    (use-package all-the-icons)
    (use-package minimap)
    (use-package undo-fu)
    (use-package evil-nerd-commenter))
#+end_src

*** Splash screen

#+begin_src emacs-lisp
  (defun subl/init-splash-screen ()
    ;; turn off the splash screen
    (setq inhibit-splash-screen t))
#+end_src

*** Scrolling

[[https://www.emacswiki.org/emacs/SmoothScrolling][Smooth scrolling]]

#+begin_src emacs-lisp
  (defun subl/init-scrolling ()
    ;; set scrolling to be nicer
    (setq scroll-margin 30)
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (setq auto-window-vscroll nil))
#+end_src

*** Editor Chrome

#+begin_src emacs-lisp
  (defun subl/init-editor-chrome ()
    ;; let's not see the toolbar
    (tool-bar-mode -1))
    ;; add highlight for current line
    (global-hl-line-mode +1)
#+end_src

*** Cursor

#+begin_src emacs-lisp
  (defun subl/init-cursor ()
    ;; Make the cursor a bar, not a blinking box
    (setq-default cursor-type 'bar))
#+end_src

*** UTF-8 encoding

#+begin_src emacs-lisp
  (defun subl/init-encoding ()
    ;; default to utf-8 for all the things
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8))

#+end_src

*** Save all on focus change

#+begin_src emacs-lisp
  (defun subl/init-save-all-on-focus-change ()
    (if (version< emacs-version "27")
      (add-hook 'focus-out-hook 'subl/save-all-unsaved)
    (setq after-focus-change-function 'subl/save-all-unsaved)))
#+end_src

*** Restore sessions

#+begin_src emacs-lisp
  (defun subl/init-save-editor-session ()
    (desktop-save-mode 1))
#+end_src

*** Keybindings

#+begin_src emacs-lisp
  (defun subl/init-keybindings ()
    (org-babel-load-file (expand-file-name "subliminal-keys.org" user-emacs-directory)))
#+end_src

*** Indent guides

#+begin_src emacs-lisp
  (defun subl/init-indent-guides ()
    ;; add a visual intent guide
    (use-package highlight-indent-guides
      :ensure t
      :hook (prog-mode . highlight-indent-guides-mode)
      :custom
      (highlight-indent-guides-method 'character)
      (highlight-indent-guides-character ?|)
      (highlight-indent-guides-responsive 'stack)))
#+end_src

*** Theme

#+begin_src emacs-lisp
  (defun subl/init-theme ()
    (use-package monokai-pro-theme
      :ensure t
      :config
      (load-theme 'monokai-pro t)))
#+end_src

*** Multiple cursors

- [[https://emacs.stackexchange.com/questions/751/fundamentals-of-multiple-cursors][Multiple cursors stackexchange question]]
- [[http://emacsrocks.com/e13.html][Emacs Rocks]]

#+begin_src emacs-lisp
  (defun subl/init-multi-cursor ()
    (use-package multiple-cursors))
#+end_src

*** File tabs

For (buffer) tabs, we use the excellent [[https://github.com/ema2159/centaur-tabs][Centaur Tabs]] package.

#+begin_src emacs-lisp
  (defun subl/init-file-tabs ()
    (use-package centaur-tabs
      :demand
      :config
      (setq centaur-tabs-style "bar"
            centaur-tabs-height 24
            centaur-tabs-set-icons t
            centaur-tabs-set-modified-marker t
            ; centaur-tabs-show-navigation-buttons t
            centaur-tabs-gray-out-icons 'buffer
            centaur-tabs-set-bar 'over
            centaur-tabs-modified-marker "*"
            x-underline-at-descent-line t)
      (centaur-tabs-headline-match)
      (centaur-tabs-mode t))

      ;;(setq centaur-tabs-gray-out-icons 'buffer)
      ;;(setq centaur-tabs-style "slant")
  )
#+end_src


* Initialize
#+begin_src emacs-lisp
  (defun subl/init-subliminal ()
    "Run all the init functions for subliminal"
    (interactive)
    (subl/init-use-package)
    (subl/init-miscellaneous-settings)
    (subl/init-miscellaneous-packages)
    (subl/init-splash-screen)
    (subl/init-encoding)
    (subl/init-editor-chrome)
    (subl/init-cursor)
    (subl/init-scrolling)
    (subl/init-save-all-on-focus-change)
    (subl/init-save-editor-session)
    (subl/init-keybindings)
    (subl/init-indent-guides)
    (subl/init-theme)
    (subl/init-multi-cursor)
    (subl/init-file-tabs))

  ;; run init
  (subl/init-subliminal)
#+end_src
