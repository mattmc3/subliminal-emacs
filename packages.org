#+TITLE: Package Management
#+AUTHOR: mattmc3
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Notes

This is an org mode literate config. Use <TAB> to expand sections, and put Emacs lisp in source blocks.

* use-package

We want to use external packages, so let's get that configured with [[https://github.com/jwiegley/use-package][use-package]]

#+begin_src emacs-lisp
  (require 'package)

  (setq package-enable-at-startup nil)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/") t)

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-always-ensure t)
#+end_src

* Benchmarking

We may need to benchmark Emacs config. If so, tangle the following block:

- [[https://github.com/dholm/benchmark-init-el][benchmark-init]]

#+begin_src emacs-lisp :tangle no
(use-package benchmark-init
    :ensure t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
;; Once the config is loaded, run (benchmark-init/show-durations-tabulated)
#+end_src

* All the icons

- [[https://github.com/domtronn/all-the-icons.el][All the icons]]

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

* Evil nerd commenter

- [[https://github.com/redguardtoo/evil-nerd-commenter][Evil nerd commenter]] - to handle code commenting well, this plugin is necessary and does't require Evil despite its name

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src

* Minimap

#+begin_src emacs-lisp
  (use-package minimap)
#+end_src

* Undo-fu

- [[https://gitlab.com/ideasman42/emacs-undo-fu][Undo-fu]] package
  - [[http://ergoemacs.org/emacs/emacs_best_redo_mode.html][Undo/redo saga]]
  - [[https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs][Stackoverflow]] undo question

#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src

* Company mode

Company (complete anything) is the way we'll do completions

#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

* Language Server Protocol

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :config

  ;; make sure we have lsp-imenu everywhere we have LSP
  (require 'lsp-imenu)
  (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
  ;; get lsp-python-enable defined
  ;; NB: use either projectile-project-root or ffip-get-project-root-directory
  ;;     or any other function that can be used to find the root directory of a project
  (lsp-define-stdio-client lsp-python "python"
                           #'projectile-project-root
                           '("pyls"))

  ;; make sure this is activated when python-mode is activated
  ;; lsp-python-enable is created by macro above
  (add-hook 'python-mode-hook
            (lambda ()
              (lsp-python-enable)))

  ;; lsp extras
  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))

  ;; NB: only required if you prefer flake8 instead of the default
  ;; send pyls config via lsp-after-initialize-hook -- harmless for
  ;; other servers due to pyls key, but would prefer only sending this
  ;; when pyls gets initialised (:initialize function in
  ;; lsp-define-stdio-client is invoked too early (before server
  ;; start)) -- cpbotha
  (defun lsp-set-cfg ()
    (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
      ;; TODO: check lsp--cur-workspace here to decide per server / project
      (lsp--set-configuration lsp-cfg)))

  (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))
#+end_src

* Ivy

#+begin_src emacs-lisp
  (use-package counsel)
  (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    ;; number of result lines to display
    (setq ivy-height 10)
    ;; does not count candidates
    (setq ivy-count-format "")
    ;; no regexp by default
    (setq ivy-initial-inputs-alist nil)
    ;; configure regexp engine.
    ;;(setq ivy-re-builders-alist
    ;; allow input not in order
    ;;'((t   . i y--regex-ignore-order)))
#+end_src

* Avy

Avy lets you jump to a character on the screen by pressing ⌘-shift-; (⌘-:).
Sublime has a package called Ace Jump Sublime, and VSCode does too.

+ [[https://github.com/ice9js/ace-jump-sublime][Ace jump sublime]]
+ [[https://github.com/abo-abo/avy][Avy]]

#+begin_src emacs-lisp
(use-package avy)
#+end_src

