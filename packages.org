#+TITLE: Package Management
#+AUTHOR: mattmc3
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Notes

This is an org mode literate config. Use <TAB> to expand sections, and put Emacs lisp in source blocks.

* use-package

We want to use external packages, so let's get that configured with [[https://github.com/jwiegley/use-package][use-package]]

#+begin_src emacs-lisp
  (require 'package)

  (setq package-enable-at-startup nil)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/") t)

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-always-ensure t)
#+end_src

* Benchmarking

We may need to benchmark Emacs config. If so, tangle the following block:

- [[https://github.com/dholm/benchmark-init-el][benchmark-init]]

#+begin_src emacs-lisp :tangle no
(use-package benchmark-init
    :ensure t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
;; Once the config is loaded, run (benchmark-init/show-durations-tabulated)
#+end_src

* All the icons

- [[https://github.com/domtronn/all-the-icons.el][All the icons]]

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

* Evil nerd commenter

- [[https://github.com/redguardtoo/evil-nerd-commenter][Evil nerd commenter]] - to handle code commenting well, this plugin is necessary and does't require Evil despite its name

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src

* Minimap

#+begin_src emacs-lisp
  (use-package minimap)
#+end_src

* Undo-fu

- [[https://gitlab.com/ideasman42/emacs-undo-fu][Undo-fu]] package
  - [[http://ergoemacs.org/emacs/emacs_best_redo_mode.html][Undo/redo saga]]
  - [[https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs][Stackoverflow]] undo question

#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src
