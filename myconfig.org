#+TITLE: My custom Emacs config
#+AUTHOR: mattmc3
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Notes
This is an org mode literate config. Use <TAB> to expand sections, and put Emacs lisp in source blocks.

** Tangling

Org mode converts to e-lisp files with the =:tangle yes= header,
but some blocks can be excluded with an explicit  =:tangle no=.
This is easier than commenting everything out in a block.

** Org mode references
+ [[https://orgmode.org/manual/][Manual]]
+ [[https://orgmode.org/manual/Languages.html#Languages][Source block languages]]

* TODOs
** TODO Put your personal settings here

** Emacs editor style

*** Font

To install fonts via homebrew, you can run the following commands:

#+begin_src sh
  brew install --cask font-sauce-code-pro-nerd-font
#+end_src

#+begin_src emacs-lisp
  ;; Sauce Code Pro Nerd Font
  ;; (ignore-errors (set-frame-font "Sauce Code Pro Nerd Font 13"))
  ;; MesloLGS Nerd Font
  (ignore-errors (set-frame-font "MesloLGS Nerd Font 13"))
#+end_src

*** Line numbers
#+begin_src emacs-lisp
  ;; show line numbers
  (global-display-line-numbers-mode)
#+end_src

*** Whitespace
#+begin_src emacs-lisp
  ;; show tabs
  (global-whitespace-mode)
  (setq whitespace-style '(trailing tabs tab-mark))

  ;; trailing newlines are the bomb
  (setq require-final-newline t)
#+end_src

** Org mode

#+begin_src emacs-lisp
  (setq org-adapt-indentation nil
        org-bullets-bullet-list '("◉" "○" "✸" "◈" "✽" "✲")
        org-startup-with-inline-images t)
#+end_src

** Packages
*** Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

*** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t)
  (which-key-mode)
#+end_src

*** Treesitter
#+begin_src emacs-lisp
;; more consistant syntax highlighting
(use-package tree-sitter
  :ensure t
  :diminish
  :hook ((ruby-mode . tree-sitter-hl-mode)
         (rustic-mode . tree-sitter-hl-mode))
  :config (global-tree-sitter-mode))

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter)
#+end_src

*** Rainbow delimiters
#+begin_src emacs-lisp
;; match paired brackets with colors
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Language server processor (LSP)
#+begin_src emacs-lisp
;; (use-package lsp-mode
;;   :ensure t
;;   :hook (lsp-enable-which-key-integration)
;;   :commands lsp
;;   :custom (lsp-keymap-prefix "C-c M-k")
;;   :config (add-to-list 'exec-path "~/src/elixir-lsp/elixir-ls/release"))
;;
;; (use-package lsp-ui
;;   :ensure t
;;   :after lsp-mode
;;   :hook (lsp-mode . lsp-ui-mode)
;;   :commands lsp-ui-mode)
#+end_src

*** Version control
#+begin_src emacs-lisp
;; (use-package magit
;;   :ensure t
;;   :pin melpa
;;   :bind (("C-c g s" . magit-status))
;;   :hook ((git-commit-mode . (lambda () (set-fill-column 72))))
;;   :config
;;   (setq git-commit-style-convention-checks '(non-empty-second-line overlong-summary-line)
;;         git-commit-summary-max-length 50))
#+end_src

*** Diminish
#+begin_src emacs-lisp :tangle no
  (use-package diminish :ensure t)
#+end_src

*** Exec path from shell
#+begin_src emacs-lisp :tangle no
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setenv "SHELL" "/usr/local/bin/zsh")
    (setq exec-path-from-shell-variables '("PATH"))
    (exec-path-from-shell-initialize))
#+end_src
*** Smart tabs mode
#+begin_src emacs-lisp :tangle no
  ;; indent with tabs, align with spaces where enabled
  ;;(use-package smart-tabs-mode
  ;;  :ensure t)
#+end_src
